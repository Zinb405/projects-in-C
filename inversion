#include <stdio.h>
#include <stdlib.h>
long count = 0;

void recursion(int T[], int left, int right);
void mergesort(int T[], int left, int middle, int right);
void sortedarray(int T[], int length);
void recursion(int T[], int left, int right)
{

    if (left != right)
    {

        int middle = (right + left) / 2;
        recursion(T, left, middle);
        recursion(T, middle + 1, right);
        mergesort(T, left, middle, right);
    }
}

void mergesort(int T[], int left, int middle, int right)
{

    int leftlength = middle - left + 1;
    int rightlength = right - middle;
    int *leftarray = (int *) malloc(leftlength * sizeof(int));
    int *rightarray = (int *) malloc(rightlength * sizeof(int));
    int i, j, p;

    // Copy left and right subarrays
    for (i = 0; i < leftlength; i++)
    {
        leftarray[i] = T[left + i];
    }
    for (j = 0; j < rightlength; j++)
    {
        rightarray[j] = T[middle + 1 + j];
    }
    for (i = 0, j = 0, p = left; p <= right; p++)
    {
        if (i < leftlength && (j >= rightlength || leftarray[i] < rightarray[j]))
        {
            T[p] = leftarray[i];
            i++;
        }
        else
        {
            if (rightarray[j] < leftarray[i] || rightarray[j] == rightlength - 1)
            {
                count += leftlength - i;
            }

            T[p] = rightarray[j];
            j++;
        }
    }
}

void sortarray(int T[], int length)
{
    recursion(T, 0, length - 1);
}

int main(int argc, char *argv[])
{

    if (argc != 2)
    {
        printf("Enter please the text file\n");
    }
    FILE *input = fopen(argv[1], "r");
    if (input == NULL)
    {
        printf("File coudn't be open!\n");
        return 1;
    }
    int len = 100000;
    int array[len];

    for (int i = 0; i < len; i++)
    {
        fscanf(input, "%d", &array[i]);
    }
    sortarray(array, len);

    printf("%ld", count);
    fclose(input);
    return 0;
}
